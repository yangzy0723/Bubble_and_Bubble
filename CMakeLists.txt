cmake_minimum_required(VERSION 3.5)

project(QtGameFramework VERSION 0.1 LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 Qt5 COMPONENTS Widgets REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Widgets REQUIRED)
find_package(Qt6 REQUIRED COMPONENTS Multimedia)

set(PROJECT_SOURCES
        main.cpp
        mainwindow.cpp
        mainwindow.h
        mainwindow.ui

        image.qrc

        framework/gamescene.h framework/gamescene.cpp
        framework/gameobject.h framework/gameobject.cpp
        framework/component.h framework/component.cpp
        framework/transform.h framework/transform.cpp
        framework/imagetransform.h framework/imagetransform.cpp
        framework/transformbuilder.h framework/transformbuilder.cpp

        exit.h exit.cpp
        fire.h fire.cpp
        bomb.h bomb.cpp
        start.h start.cpp
        block.h block.cpp
        pause.h pause.cpp
        player.h player.cpp
        health.h health.cpp
        hitable.h hitable.cpp
        physics.h physics.cpp
        pushprop.h pushprop.cpp
        softwall.h softwall.cpp
        hardwall.h hardwall.cpp
        unmatched.h unmatched.cpp
        speedprop.h speedprop.cpp
        scoreboard.h scoreboard.cpp
        resultshow.h resultshow.cpp
        bombphysics.h bombphysics.cpp
        numplusprop.h numplusprop.cpp
        instructions.h instructions.cpp
        aicontroller.h aicontroller.cpp
        rangeplusprop.h rangeplusprop.cpp
        usercontroller.h usercontroller.cpp
        abilitypushbomb.h abilitypushbomb.cpp
)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(QtGameFramework
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
    )
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET QtGameFramework APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation
else()
    if(ANDROID)
        add_library(QtGameFramework SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(QtGameFramework
            ${PROJECT_SOURCES}
        )
    endif()
endif()

target_include_directories(QtGameFramework PRIVATE framework/)
target_link_libraries(QtGameFramework PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)
target_link_libraries(QtGameFramework PRIVATE Qt6::Multimedia)

set_target_properties(QtGameFramework PROPERTIES
    MACOSX_BUNDLE_GUI_IDENTIFIER my.example.com
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(QtGameFramework)
endif()
